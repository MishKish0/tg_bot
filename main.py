import sqlite3 as sql
from datetime import datetime
from threading import Thread
import time
import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import requests
import config

bot = telebot.TeleBot(config.BOT_TOKEN)
admin_ids = config.ADMIN_IDS
user_states = {}

def init_db():
    with sql.connect(config.DB_NAME) as con:
        c = con.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS birthdays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            birthday_date TEXT NOT NULL,
            chat_id INTEGER,
            FOREIGN KEY (chat_id) REFERENCES chats (chat_id) ON DELETE CASCADE
        )""")
        
        c.execute("""CREATE TABLE IF NOT EXISTS photo (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            file_id TEXT NOT NULL,
            caption TEXT DEFAULT "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∏"
        )""")
        
        c.execute("""CREATE TABLE IF NOT EXISTS chats (
            chat_id INTEGER PRIMARY KEY,
            title TEXT,
            is_active INTEGER DEFAULT 1,
            mailing_time TEXT DEFAULT "09:00"
        )""")

init_db()

def get_random_cat():
    try:
        response = requests.get('https://api.thecatapi.com/v1/images/search')
        if response.status_code == 200:
            return response.json()[0]['url']
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ç–∏–∫–∞: {e}")
        return None

def add_chat(chat_id, title, mailing_time="09:00"):
    with sql.connect(config.DB_NAME) as con:
        c = con.cursor()
        c.execute("INSERT OR IGNORE INTO chats (chat_id, title, mailing_time) VALUES (?, ?, ?)", 
                 (chat_id, title, mailing_time))

def get_chats_for_mailing():
    current_time = datetime.now().strftime(config.TIME_FORMAT)
    with sql.connect(config.DB_NAME) as con:
        c = con.cursor()
        c.execute("SELECT chat_id FROM chats WHERE is_active = 1 AND mailing_time = ?", (current_time,))
        return [row[0] for row in c.fetchall()]
        
def update_chat_mailing_time(chat_id, mailing_time):
    with sql.connect(config.DB_NAME) as con:
        c = con.cursor()
        c.execute("UPDATE chats SET mailing_time = ? WHERE chat_id = ?", (mailing_time, chat_id))
        
def get_random_photo():
    try:
        with sql.connect(config.DB_NAME) as con:
            c = con.cursor()
            c.execute("SELECT file_id FROM photo ORDER BY RANDOM() LIMIT 1")
            result = c.fetchone()
            return result[0] if result else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

def morning_mailing():
    try:
        today = datetime.now().strftime("%d-%m")
        random_photo = get_random_photo()
        if not random_photo:
            random_photo = get_random_cat()
        
        chat_ids = get_chats_for_mailing()
        
        if not chat_ids:
            return
            
        for chat_id in chat_ids:
            try:
                with sql.connect(config.DB_NAME) as con:
                    c = con.cursor()
                    c.execute("SELECT name FROM birthdays WHERE substr(birthday_date, 1, 5) = ? AND chat_id = ?", (today, chat_id))
                    birthdays = [row[0] for row in c.fetchall()]
                
                if birthdays:
                    if len(birthdays) == 1:
                        message = f"–°–µ–≥–æ–¥–Ω—è {birthdays[0]} –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üò∫üéâ\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
                    elif len(birthdays) == 2:
                        message = f"–°–µ–≥–æ–¥–Ω—è {birthdays[0]} –∏ {birthdays[1]} –ø—Ä–∞–∑–¥–Ω—É—é—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üò∫üéâ\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥"
                    else:
                        message = "–°–µ–≥–æ–¥–Ω—è –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n"
                        for name in birthdays:
                            message += f"üéÇ {name}\n"
                        message += "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤!üò∫üéâ"
                else:
                    message = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!üò∫"
                
                if random_photo:
                    if isinstance(random_photo, str) and random_photo.startswith('http'):
                        bot.send_photo(chat_id, random_photo, caption=message)
                    else:
                        bot.send_photo(chat_id, random_photo, caption=message)
                else:
                    bot.send_message(chat_id, message)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def run_scheduler():
    scheduler = BackgroundScheduler()
    scheduler.add_job(morning_mailing, 'cron', minute='*')
    scheduler.start()
    
    try:
        while True:
            time.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()

scheduler_thread = Thread(target=run_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

def get_photo(message):
    request = message.text
    user_id = message.from_user.id
    
    if not message.text:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å.")
        return
    
    try:
        with sql.connect(config.DB_NAME) as con:
            c = con.cursor()
            c.execute("SELECT file_id FROM photo WHERE caption = ?", (request,))
            result = c.fetchone()
            if result:
                file_id = result[0]
                bot.send_photo(message.chat.id, file_id, caption="–í–æ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ!")
                if user_id in user_states:
                    del user_states[user_id]
            else:
                bot.send_message(message.chat.id, "–§–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        
@bot.message_handler(commands=["start"], chat_types=['private'])
def main(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")
    
@bot.message_handler(commands=["add_photo"], chat_types=['private'])
def add_photo_command(message):
    if message.from_user.id in admin_ids:
        user_states[message.from_user.id] = "waiting_photo"
        msg = bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É –ø–æ–¥–ø–∏—Å—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    else:
        bot.send_message(message.chat.id, f"{message.from_user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
       
@bot.message_handler(commands=["get_photo"], chat_types=["private"])
def request_photo(message):
    user_id = message.from_user.id
    user_states[user_id] = "waiting_get_photo"
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –≤–∞–º –µ–≥–æ –≤—ã–≤–µ–ª")
            
@bot.message_handler(content_types=['photo'], chat_types=['private'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id] == "waiting_photo":
        try:
            file_id = message.photo[-1].file_id
            caption = message.caption or "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∏"
            with sql.connect(config.DB_NAME) as con:
                c = con.cursor()
                c.execute("INSERT INTO photo (file_id, caption) VALUES (?, ?)", (file_id, caption))
            bot.reply_to(message, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            del user_states[user_id]
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            if user_id in user_states:
                del user_states[user_id]
    else:
        if message.from_user.id in admin_ids:
            bot.reply_to(message, "–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_photo")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")

@bot.message_handler(commands=["cancel"], chat_types=['private'])
def cancel(message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
        bot.send_message(message.chat.id, "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@bot.message_handler(commands=["add_chat"], chat_types=['private'])
def add_chat_command(message):
    if message.from_user.id in admin_ids:
        try:
            if len(message.text.split()) > 1:
                chat_id = int(message.text.split()[1])
                try:
                    chat_info = bot.get_chat(chat_id)
                    title = chat_info.title
                    add_chat(chat_id, title)
                    bot.reply_to(message, f"–ß–∞—Ç '{title}' (ID: {chat_id}) –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏!")
                except Exception as e:
                    bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç. –û—à–∏–±–∫–∞: {str(e)}")
            else:
                chat_id = message.chat.id
                title = message.chat.title
                add_chat(chat_id, title)
                bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π —á–∞—Ç: {title}, –∏–º–µ—é—â–∏–π ID: {chat_id}, —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞.")
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

@bot.message_handler(commands=["set_mailing_time"], chat_types=['private'])
def set_mailing_time(message):
    if message.from_user.id in admin_ids:
        try:
            parts = message.text.split()
            if len(parts) == 3:
                chat_id = int(parts[1])
                mailing_time = parts[2]
                try:
                    datetime.strptime(mailing_time, config.TIME_FORMAT)
                    update_chat_mailing_time(chat_id, mailing_time)
                    bot.reply_to(message, f"–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {mailing_time}")
                except ValueError:
                    bot.reply_to(message, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {config.TIME_FORMAT}")
            else:
                bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_mailing_time <chat_id> <–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {config.TIME_FORMAT}>")
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞.")
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

@bot.message_handler(commands=["get_chat_id"])
def get_chat_id(message):
    chat_id = message.chat.id
    title = message.chat.title
    bot.reply_to(message, f"–í–æ—Ç ID —á–∞—Ç–∞({title}): {chat_id}")

@bot.message_handler(content_types=['new_chat_members'], chat_types=['group', 'supergroup'])
def handle_new_members(message):
    for new_member in message.new_chat_members:
        if new_member.id == bot.get_me().id:
            welcome_text = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é /set_mailing_time"
            )
            bot.send_message(message.chat.id, welcome_text)

@bot.message_handler(commands=["add_birthday"], chat_types=['group', 'supergroup', 'private'])
def add_birthday_command(message):
    if message.from_user.id not in admin_ids:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    try:
        if message.chat.type in ['group', 'supergroup']:
            chat_id = message.chat.id
            parts = message.text.split(maxsplit=2)
            if len(parts) < 3:
                bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_birthday {config.DATE_FORMAT.replace('%', '')} –ò–º—è –§–∞–º–∏–ª–∏—è")
                return
            date_str = parts[1]
            name = parts[2]
        else:
            parts = message.text.split(maxsplit=3)
            if len(parts) < 4:
                bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_birthday chat_id {config.DATE_FORMAT.replace('%', '')} –ò–º—è –§–∞–º–∏–ª–∏—è")
                return
            try:
                chat_id = int(parts[1])
            except ValueError:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return
            date_str = parts[2]
            name = parts[3]
        
        try:
            birth_date = datetime.strptime(date_str, config.DATE_FORMAT)
            formatted_date = birth_date.strftime(config.DATE_FORMAT)
        except ValueError:
            bot.reply_to(message, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {config.DATE_FORMAT.replace('%', '')}")
            return
            
        with sql.connect(config.DB_NAME) as con:
            c = con.cursor()
            c.execute("SELECT 1 FROM chats WHERE chat_id = ?", (chat_id,))
            if not c.fetchone():
                bot.reply_to(message, f"–ß–∞—Ç —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é /add_chat")
                return
            
        with sql.connect(config.DB_NAME) as con:
            c = con.cursor()
            c.execute("INSERT INTO birthdays (name, birthday_date, chat_id) VALUES (?, ?, ?)",
                     (name, formatted_date, chat_id))
                     
        bot.reply_to(message, f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {formatted_date} –≤ —á–∞—Ç–µ {chat_id}")
            
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=["remove_birthday"], chat_types=['private'])
def remove_birthday_command(message):
    if message.from_user.id not in admin_ids:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return  
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_birthday chat_id –ò–º—è –§–∞–º–∏–ª–∏—è")
            return
        try:
            chat_id = int(parts[1])
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            return
        name = parts[2]
        
        with sql.connect(config.DB_NAME) as con:
            c = con.cursor()
            c.execute("DELETE FROM birthdays WHERE name = ? AND chat_id = ?", (name, chat_id))
            
            if c.rowcount > 0:
                bot.reply_to(message, f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name} –≤ —á–∞—Ç–µ {chat_id} —É–¥–∞–ª–µ–Ω")
            else:
                bot.reply_to(message, f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=["list_birthdays"], chat_types=['private'])
def list_birthdays_command(message):
    if message.from_user.id not in admin_ids:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /list_birthdays chat_id")
            return
        try:
            chat_id = int(parts[1])
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            return
        
        with sql.connect(config.DB_NAME) as con:
            c = con.cursor()
            c.execute("SELECT name, birthday_date FROM birthdays WHERE chat_id = ? ORDER BY birthday_date", (chat_id,))
            birthdays = c.fetchall()
            
            if not birthdays:
                bot.reply_to(message, f"–í —á–∞—Ç–µ {chat_id} –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
                return
                
            message_text = f"–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}:\n\n"
            for name, date in birthdays:
                message_text += f"{name} - {date}\n"
                
            bot.reply_to(message, message_text)
            
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.from_user.id
    if message.chat.type != 'private' and user_id not in user_states:
        return
    if user_id in user_states:
        state = user_states[user_id]
        if state == "waiting_photo":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç")
        elif state == "waiting_get_photo":
            get_photo(message)
        else:
            bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")

bot.infinity_polling()